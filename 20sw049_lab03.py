# -*- coding: utf-8 -*-
"""20SW049_Lab03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/188Pg81GgjXFuxBlDS6eGRSsyvJX89Q4P
"""

def population_density(population, land_area):
    if land_area == 0:
        raise ValueError("Land area cannot be zero.")
    return population / land_area


print(population_density(1000, 50))

def readable_timedelta(days):
    w = days // 7
    remaining_days = days % 7
    return f"{w} week(s) and {remaining_days} day(s)"

# Test cases
print(readable_timedelta(10))

numbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Using map() to calculate the mean of each list and create the list averages
averages = list(map(lambda lst: sum(lst) / len(lst), numbers))

print(averages)

cities = ["New York City", "Los Angeles", "Chicago", "Mountain View", "Denver", "Boston"]

# Using lambda expression within filter() to filter short names
short_cities = list(filter(lambda name: len(name) < 10, cities))

print(short_cities)

#TASK 5

# Get and process input for a list of names
names_input = input("Enter a list of student names separated by commas: ")
names = names_input.split(',')

# Get and process input for a list of the number of assignments
assignments_input = input("Enter a list of the number of missing assignments for each student separated by commas: ")
assignments = [int(x) for x in assignments_input.split(',')]

# Get and process input for a list of grades
grades_input = input("Enter a list of grades for each student separated by commas: ")
grades = [float(x) for x in grades_input.split(',')]

# Message string to be used for each student
message = "Hi {},\n\nThis is a reminder that you have {} assignments left to submit before you can graduate. Your current grade is {} and can increase to {} if you submit all assignments before the due date.\n\n"

# Write a loop that iterates through each set of names, assignments, and grades to print each student's message
for name, assignment_count, grade in zip(names, assignments, grades):
    potential_grade = grade + (2 * assignment_count)
    print(message.format(name, assignment_count, grade, potential_grade))

#TASK 6

camelot_lines = []

with open("camelot.txt") as f:
  for line in f:camelot_lines.append(line.strip())
  print(camelot_lines)

#TASK 7

def create_cast_list(filename):
    cast_list = []
    with open(filename, 'r') as file:
        for line in file:
            # Split each line by comma and take the first element (actor's name)
            actor_name = line.strip().split(',')[0]
            cast_list.append(actor_name)
    return cast_list

cast_list = create_cast_list('flying_circus_cast.txt')
for actor in cast_list:
    print(actor)